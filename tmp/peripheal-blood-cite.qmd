```{r}
library(dplyr)
library(Rtsne)
library(Seurat)
library(patchwork)
library(factoextra)
library(DropletUtils)
source("./libraries/utils.R")

DATASETS_FOLDER = './dataset/'
NAME = 'peripheal-blood'

inDataDir  = paste(DATASETS_FOLDER, NAME, sep='')
outDataDir = paste(DATASETS_FOLDER, NAME, '-filtered/', sep='') 
```

```{r}
# Loading data
# Loading data
allData = Read10X(data.dir = inDataDir, strip.suffix = TRUE)

data = allData[[1]]

antibodyData = data.frame(allData[[2]])
# remove `_TotalSeqB` from column names
rownames(antibodyData) = gsub("_TotalSeqB", "", rownames(antibodyData))

View(antibodyData[,1:10])

```

```{r}
sce = read10xCounts(inDataDir)
sce <- splitAltExps(sce, rowData(sce)$Type)

adt.counts = counts(altExp(sce))
rownames(adt.counts)
colnames(adt.counts) <- colnames(antibodyData)
colnames(adt.counts)
top.marker = rownames(adt.counts)[max.col(t(adt.counts))]
hist(match(top.marker, rownames(adt.counts)))

unique(rownames(adt.counts))

total.count = colSums(adt.counts)
boxplot(split(log10(total.count), top.marker), ylab="Log-total ADT count", las=2)

adt.detected <- colSums(adt.counts > 0)
hist(adt.detected, col='grey', main="", xlab="Number of detected ADTs")

controls <- grep("^Ig", rownames(altExp(sce))) # see below for details.
qc.stats <- cleanTagCounts(altExp(sce), controls=controls)
summary(qc.stats$zero.ambient) # libraries removed with no ambient contamination
summary(qc.stats$high.controls)

hist(log10(qc.stats$sum.controls + 1), col='grey', breaks=50,
    main="", xlab="Log-total count for controls per cell")

thresholds <- attr(qc.stats$high.controls, "thresholds")
abline(v=log10(thresholds["higher"]+1), col="red", lty=2)

library(scuttle)
mito <- grep("^MT-", rowData(sce)$Symbol)
df <- perCellQCMetrics(sce, subsets=list(Mito=mito))
str(df$subsets_Mito_percent)
# mito.discard <- isOutlier(df$subsets_Mito_percent, type="higher")
mito.discard = df$subsets_Mito_percent > 10
summary(mito.discard)

unfiltered = sce
discard = qc.stats$discard | mito.discard
sce = sce[,!discard]



filtered_cells = colnames(adt.counts)[!discard]

sf.lib = librarySizeFactors(altExp(sce))
summary(sf.lib)
sf.geo <- geometricSizeFactors(altExp(sce))
summary(sf.geo)
baseline <- ambientProfileBimodal(altExp(sce))
head(baseline)
sf.amb <- medianSizeFactors(altExp(sce), reference=baseline)
summary(sf.amb)

library(scater)
plotExpression(altExp(sce), features=rownames(altExp(sce)), exprs_values="counts") +
    scale_y_log10() + 
    geom_point(data=data.frame(x=names(baseline), y=baseline), mapping=aes(x=x, y=y), cex=3)


# We're getting a little ahead of ourselves here, in order to define some
# clusters to make this figure; see the next section for more details.
library(scran)
tagdata <- logNormCounts(altExp(sce)) 
clusters <- clusterCells(tagdata, assay.type="logcounts")

by.clust <- split(log2(sf.amb/sf.lib), clusters)
boxplot(by.clust, xlab="Cluster", ylab="Log-ratio (median-based/library size factors)")

controls <- grep("^Ig", rownames(altExp(sce)))
sf.control <- librarySizeFactors(altExp(sce), subset_row=controls) 
summary(sf.control)

plot(sf.amb, sf.control, log="xy", 
    xlab="median-based size factors (tag)",
    ylab="Control size factors (tag)")
abline(0, 1, col="grey", lty=2)

sizeFactors(altExp(sce)) <- sf.amb
sce <- applySCE(sce, logNormCounts)

# Checking that we have normalized values:
assayNames(sce)
assayNames(altExp(sce))

clusters.adt <- clusterCells(altExp(sce), assay.type="logcounts")

hist(as.numeric(factor(clusters)))

# Generating a t-SNE plot.
library(scater)
set.seed(1010010)
altExp(sce) <- runTSNE(altExp(sce))

umap = runUMAP(sce)
colLabels(umap) <- factor(clusters.adt)
plotUMAP((umap), colour_by="label", text_by="label", text_color="red")
ggsave("umap.png")

tsne = runTSNE(sce)
colLabels(tsne) <- factor(clusters.adt)
plotTSNE((tsne), colour_by="label", text_by="label", text_color="red")
ggsave("tsne.png")

abtsne = runTSNE(altExp(sce))
colLabels(abtsne) <- factor(clusters.adt)
plotTSNE((abtsne), colour_by="label", text_by="label", text_color="red")

colLabels(altExp(sce)) <- factor(clusters.adt)
plotTSNE(altExp(sce), colour_by="label", text_by="label", text_color="red")

cllabels = data.frame("cell" = filtered_cells, "cluster" = clusters.adt)

```

```{r}

labels = data.frame("cell" = colnames(antibodyData))
labels$go = ''
# labels = vector('list', length = ncol(antibodyData))
# names(labels) = colnames(antibodyData)
```

```{r}
for(i in 1:ncol(antibodyData)) {
  cell = colnames(antibodyData)[i]
  cellCounts = antibodyData[[cell]]
  names(cellCounts) <- rownames(antibodyData)
  cellCounts = cellCounts / max(cellCounts)
  cellCounts = sort(cellCounts, decreasing=TRUE)
  for(j in 2:length(cellCounts)) {
    if(cellCounts[j] < 0.95) {
      break
    }
  }
  # labels$go[i] = paste(names(cellCounts)[1:i-1], collapse = '~')
  labels$go[i] = paste(sort(names(cellCounts)[1:j-1]), collapse = '~')
}
```

```{r}
# Load the PBMC dataset
pbmc.data <- data
```

```{r}
# plot distribution of amount of cells in which each gene is expressed
ggplot(data.frame("sum" = rowSums(pbmc.data > 0)), aes(x=sum)) + geom_histogram()
# plot distribution of sum of counts for each cell
ggplot(data.frame("sum" = colSums(pbmc.data > 0)), aes(x=sum)) + geom_histogram()
```

```{r}
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 100)
```

```{r}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
```

```{r}
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```
```{r}
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
```

```{r}
# Set very loose limits for COTAN
pbmc <- subset(pbmc, subset = nFeature_RNA > 0 & nFeature_RNA < 5000 & percent.mt < 10)
```

```{r}
# Write pre-processed data
data_to_write = GetAssayData(object = pbmc, assay = "RNA", slot = "data")
write.csv(data_to_write, paste(outDataDir, "data.csv", sep=""))
Dir10X = paste(outDataDir, "10X", sep="")
if (!dir.exists(Dir10X)) {
  write10xCounts(Dir10X, data_to_write)
}
```

```{r}
ncol(data_to_write)
cllabels$cell

colnames(data_to_write)

ddw = data.frame(data)[,cllabels$cell]



```

```{r}
filtered_labels = merge(data.frame("cell"=colnames(data_to_write)), labels)
filtered_labels$cluster.ids = as.numeric(as.factor(filtered_labels$go))
```

```{r}
antibodyDataFiltered = antibodyData[,filtered_labels$cell]
antibodyDataFiltered = apply(antibodyDataFiltered, 2, function(x) {​​​​​​x / max(x)}​​​​​​)

antibodyDataFiltered[1:10]
boxplot(t(antibodyDataFiltered)[,1:16])
boxplot(t(antibodyDataFiltered)[,17:32])
fviz_nbclust(t(antibodyDataFiltered),kmeans,"wss",k.max=30)
km=kmeans(t(antibodyDataFiltered),centers=10)
tsne=Rtsne(t(antibodyDataFiltered),perplexity=30)
plot(tsne$Y,pch='*',col=km$cluster)
```

```{r}
write.csv(antibodyDataFiltered, paste(outDataDir, "antibodyDataFiltered.csv", sep=""))
```

```{r}
# filtered_labels$cluster.ids = km$cluster

hist(filtered_labels$cluster.ids)
unique(filtered_labels$go)


write.csv(filtered_labels[,c('cell', 'cluster.ids')], paste(outDataDir, "labels.csv", sep=""), row.names = FALSE)

mapping = data.frame("go"=unique(filtered_labels$go), "id"=unique(filtered_labels$cluster.ids))
# sort mapping by id
mapping = mapping[order(mapping$id),]

# Create false GO mapping to ensure compatibility with other datasets
write.csv(mapping, paste(outDataDir, "mapping.csv", sep=""), row.names = FALSE)
```
