---
title: Clustering and differential expression analysis using Seurat
---

```{r}
library(dplyr)
library(rjson)
library(Seurat)
library(patchwork)
library(DropletUtils)
source("../../libraries/utils.R")
```

Data loading and preparation

```{r}
dataset_name = "PBMC1"
dataset_path = '../../dataset/'

DATA_DIR = paste(dataset_path, dataset_name, '-Filtered/10X', sep='')
LABEL_PATH = paste(dataset_path, dataset_name, '-Filtered/celltypist_labels.csv', sep='')

OUT_DEFAULT_DIR = paste("../../results/", dataset_name, '/seurat/default/', sep='')
OUT_CELLTYPIST_DIR = paste("../../results/", dataset_name, '/seurat/celltypist/', sep='')
OUT_PROTEIN_DIR = paste("../../results/", dataset_name, '/seurat/protein/', sep='')
if (!dir.exists(OUT_DEFAULT_DIR)) {
  dir.create(OUT_DEFAULT_DIR, recursive = TRUE)
}
if (!dir.exists(OUT_CELLTYPIST_DIR)) {
  dir.create(OUT_CELLTYPIST_DIR, recursive = TRUE)
}
if (!dir.exists(OUT_PROTEIN_DIR)) {
  dir.create(OUT_PROTEIN_DIR, recursive = TRUE)
}

N_CLUSTERS_CELLTYPIST = fromJSON(file=paste('../../dataset/', dataset_name, '-Filtered/raw/nclusters.json', sep=''))$nclusters
N_CLUSTERS_PROTEIN = fromJSON(file=paste('../../dataset/', dataset_name, '-Filtered/10x/nclusters.json', sep=''))$nclusters

TOP_MARKER_NUM = 500
```

Dataset loading

```{r}
pbmc.data <- Read10X(DATA_DIR, strip.suffix=TRUE)
pbmc <- CreateSeuratObject(counts = pbmc.data, min.cells = 0, min.features = 0)
```

Studying feature variance

```{r}
plot(log(sort(apply(pbmc.data,1,var), decreasing=TRUE)))
```

Data normalization

```{r}
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
```

Feature selection

```{r}
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000) # nfeatures chosen based on elbow plot above
VariableFeaturePlot(pbmc)
```

Feature scaling

```{r}
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
```

Clustering with default parameters

Plot pca explained variance ratio to choose number of components

```{r}
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(object = pbmc, ndims = 50)
```

Perform the clustering with default parameters

```{r}
pbmc <- FindNeighbors(pbmc, dims = 1:16) # chosen based on elbow plot above
pbmc <- FindClusters(pbmc)
```

Save the default clustering results

```{r}
label_df = data.frame(Idents(pbmc))
label_df$cell <- rownames(label_df)
rownames(label_df) <- 1:nrow(label_df)
colnames(label_df)[colnames(label_df) == "Idents.pbmc."] <- "computed_id"
label_df$computed_id <- as.numeric(label_df$computed_id)
write_clustering(OUT_DEFAULT_DIR, label_df, "cell", "computed_id")
```

Differential expression on default clustering results

```{r}
pbmc.markers <- FindAllMarkers(pbmc)
```

Save markers

```{r}
pbmc.markers$cluster <- as.numeric(pbmc.markers$cluster)
write_markers(OUT_DEFAULT_DIR, pbmc.markers, "gene", "cluster", "p_val_adj", FALSE, TOP_MARKER_NUM)
```

Clustering tuning resolution according to celltypist

```{r}
cat(paste("Clusters to find:", N_CLUSTERS_CELLTYPIST), sep='')
```

```{r}
# get ids of clusters bigger than 40 cells
mapping = read.csv(paste('../../dataset/', dataset_name, '-Filtered/raw/celltypist_mapping.csv', sep=''))
counts = read.csv(paste('../../dataset/', dataset_name, '-Filtered/raw/celltypist_annotation_counts.csv', sep=''))

mapping_counts = merge(mapping, counts, by.x = "go", by.y = "cluster.ids")
mapping_counts = subset(mapping_counts, count > 40)
clusters_ids_to_keep = mapping_counts$id

# get barcodes of cells in clusters bigger than 40 cells
celltypist_labels = read.csv(paste('../../dataset/', dataset_name, '-Filtered/raw/celltypist_labels.csv', sep=''))
celltypist_labels = subset(celltypist_labels, cluster.ids %in% clusters_ids_to_keep)
barcodes_to_keep = celltypist_labels$cell

# keep only cells in clusters bigger than 40 cells
pbmc_celltypist = pbmc[, colnames(pbmc) %in% barcodes_to_keep]
```

Plot pca explained variance ratio to choose number of components

```{r}
pbmc_celltypist <- RunPCA(pbmc_celltypist, features = VariableFeatures(object = pbmc_celltypist))
ElbowPlot(object = pbmc_celltypist, ndims = 50)
```

Perform the clustering tuning resolution according to celltypist

```{r}
pbmc_celltypist <- FindNeighbors(pbmc_celltypist, dims = 1:16) # chosen based on elbow plot above

range_upper = 3
range_lower = 0

repeat{
  resolution = (range_upper + range_lower) / 2
  cat(paste("Trying resolution ", resolution, sep=''))
  pbmc_celltypist <- FindClusters(pbmc_celltypist, resolution=resolution)
  num_clusters = nlevels(Idents(pbmc_celltypist))
  cat(paste("Got ", num_clusters, ' clusters', sep=''))
  if (num_clusters == N_CLUSTERS_CELLTYPIST){
    break
  }
  else if (num_clusters < N_CLUSTERS_CELLTYPIST){
    # increase the resolution
    range_lower = resolution
  }
  else{
    # reduce the resolution
    range_upper = resolution
  }
}
```

Save the clustering tuned according to celltypist

```{r}
label_df = data.frame(Idents(pbmc_celltypist))
label_df$cell <- rownames(label_df)
rownames(label_df) <- 1:nrow(label_df)
colnames(label_df)[colnames(label_df) == "Idents.pbmc_celltypist."] <- "computed_id"
label_df$computed_id <- as.numeric(label_df$computed_id)
write_clustering(OUT_CELLTYPIST_DIR, label_df, "cell", "computed_id")
```

Differential expression on clustering results tuned according to celltypist

```{r}
pbmc_celltypist.markers <- FindAllMarkers(pbmc_celltypist)
```

Save markers

```{r}
pbmc_celltypist.markers$cluster <- as.numeric(pbmc_celltypist.markers$cluster)
write_markers(OUT_CELLTYPIST_DIR, pbmc_celltypist.markers, "gene", "cluster", "p_val_adj", FALSE, TOP_MARKER_NUM)
```

Clustering tuning resolution according to celltypist

```{r}
cat(paste("Clusters to find:", N_CLUSTERS_PROTEIN, sep=''))
```

```{r}
# get barcodes of cells labelled using protein surface
protein_labels = read.csv(paste('../../dataset/', dataset_name, '-Filtered/10x/labels.csv', sep=''))
barcodes_to_keep = protein_labels$cell

pbmc_protein = pbmc[, colnames(pbmc) %in% barcodes_to_keep]
```

Plot pca explained variance ratio to choose number of components

```{r}
pbmc_protein <- RunPCA(pbmc_protein, features = VariableFeatures(object = pbmc_protein))
ElbowPlot(object = pbmc_protein, ndims = 50)
```

Perform the clustering tuning resolution according to protein surface

```{r}
pbmc_protein <- FindNeighbors(pbmc_protein, dims = 1:16) # chosen based on elbow plot above

range_upper = 3
range_lower = 0

repeat{
  resolution = (range_upper + range_lower) / 2
  cat(paste("Trying resolution ", resolution, sep=''))
  pbmc_protein <- FindClusters(pbmc_protein, resolution=resolution)
  num_clusters = nlevels(Idents(pbmc_protein))
  cat(paste("Got ", num_clusters, ' clusters', sep=''))
  if (num_clusters == N_CLUSTERS_PROTEIN){
    break
  }
  else if (num_clusters < N_CLUSTERS_PROTEIN){
    # increase the resolution
    range_lower = resolution
  }
  else{
    # reduce the resolution
    range_upper = resolution
  }
}
```

Save the clustering tuned according to protein surface

```{r}
label_df = data.frame(Idents(pbmc_protein))
label_df$cell <- rownames(label_df)
rownames(label_df) <- 1:nrow(label_df)
colnames(label_df)[colnames(label_df) == "Idents.pbmc_protein."] <- "computed_id"
label_df$computed_id <- as.numeric(label_df$computed_id)
write_clustering(OUT_PROTEIN_DIR, label_df, "cell", "computed_id")
```

Differential expression on clustering results tuned according to protein surface

```{r}
pbmc_protein.markers <- FindAllMarkers(pbmc_protein)
```

Save markers

```{r}
pbmc_protein.markers$cluster <- as.numeric(pbmc_protein.markers$cluster)
write_markers(OUT_PROTEIN_DIR, pbmc_protein.markers, "gene", "cluster", "p_val_adj", FALSE, TOP_MARKER_NUM)
```

```{r}
sessionInfo()
```