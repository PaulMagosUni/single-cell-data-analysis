---
title: Clustering and differential expression analysis of PBMC4 using COTAN
---


```{r}
library(COTAN)
library(Seurat)
library(tibble)
library(ggplot2)
library(zeallot)
options(parallelly.fork.enable = TRUE)
source("../../libraries/utils.R")


dataset_name = 'PBMC4'
DATASET_PATH = "../../dataset/"
inDataDir = paste(DATASET_PATH, dataset_name, '-Filtered', sep='')
outDir = paste("../../results/", dataset_name, '/COTAN/', sep='')
dir.create(outDir, recursive = TRUE, showWarnings = FALSE)

setLoggingLevel(2)
setLoggingFile(file.path(outDir, paste(dataset_name, "_analysis.log", sep='')))
```

Data loading

```{r}
PBMC4 <- readRDS(file = file.path(inDataDir, paste0(dataset_name, ".cotan.RDS")))
```

Calculate genesâ€™ COEX

```{r}
PBMC4 <- proceedToCoex(
  PBMC4,
  calcCoex = TRUE,
  cores = 10,
  saveObj = TRUE,
  outDir = outDir
)
```

```{r}
saveRDS(PBMC4, file = file.path(outDir, paste0(dataset_name, ".cotan.RDS")))
```

```{r}
gdiData <- calculateGDI(PBMC4)
genesToLabel <- head(
  rownames(gdiData[order(gdiData[["GDI"]], decreasing = TRUE), ]),
  n = 50L
)
sort(genesToLabel)
```

```{r}
gdiData[genesToLabel[[50L]], "GDI"]
```

```{r}
gdiPlot <- GDIPlot(
  PBMC4,
  GDIIn = gdiData,
  GDIThreshold = 1.4,
  genes = list("Top 10 GDI genes" = genesToLabel[1L:10L])
)
plot(gdiPlot)
```

```{r}
saveRDS(PBMC4, file = file.path(outDir, paste0(dataset_name, ".cotan.RDS")))
```

```{r}
PBMC4 <- readRDS(file = file.path(outDir, paste0(dataset_name, ".cotan.RDS")))
```

Clustering

```{r}
c(splitClusters, splitCoexDF) %<-%
  cellsUniformClustering(
    PBMC4,
    GDIThreshold = 1.4,
    cores = 13,
    saveObj = TRUE,
    outDir = outDir
  )

PBMC4 <- addClusterization(
  PBMC4,
  clName = "split",
  clusters = splitClusters,
  coexDF = splitCoexDF,
  override = TRUE
)

splitClusters <- getClusterizationData(PBMC4, clName = "split")[[1]]
table(splitClusters)
```


```{r}
saveRDS(PBMC4, file = file.path(outDir, paste0(dataset_name, ".cotan.RDS")))
```

```{r} 
# if needed
c(mergedClusters, mergedCoexDF) %<-%
  mergeUniformCellsClusters(
    PBMC4,
    clusters = splitClusters,
    GDIThreshold = 1.4,
    cores = 13,
    saveObj = TRUE,
    outDir = outDir
  )

PBMC4 <- addClusterization(
  PBMC4,
  clName = "merge",
  clusters = mergedClusters,
  coexDF = mergedCoexDF,
  override = TRUE
)

mergedClusters <- getClusterizationData(PBMC4, clName = "merge")[[1]]
table(mergedClusters)
```

Save the clustering result

```{r}
final_clusters = splitClusters # or mergedClusters
final_clusters_name = "split" # or merge

saveRDS(PBMC4, file = file.path(outDir, paste0(dataset_name, ".cotan.RDS")))
cluster = as.data.frame(final_clusters)
colnames(cluster)[colnames(cluster) == deparse(substitute(final_clusters))] <- "cluster"
cluster$cluster = match(cluster$cluster, levels(final_clusters))
cluster$cell = rownames(cluster)
rownames(cluster) = c(1:nrow(cluster))
write_clustering(outDir, cluster, "cell", "cluster")
```

Differential expression

```{r}
coexDF <- DEAOnClusters(PBMC4, clusters = final_clusters)
PBMC4 <- addClusterizationCoex(PBMC4, clName = final_clusters_name,
                             coexDF = coexDF)
```

Save markers

```{r}
write_markers = function(ourDir, clusters, coex, TOP_MARKER_NUM, decreasing) {
    markers = data.frame()

    for (cluster_id in (levels(clusters))) {
        cluster_markers = data.frame()
        pv = coex[, cluster_id]
        names(pv) = rownames(coex)
        sorted_pv = sort(pv, decreasing = decreasing)
        cluster_markers = data.frame(gene = names(sorted_pv)[1:TOP_MARKER_NUM],
                                    cluster = match(cluster_id, levels(clusters)),
                                    rank = 1:TOP_MARKER_NUM)

        markers = rbind(markers, cluster_markers)
    }
    colnames(markers) = c("gene","cluster","rank")

    write.csv(markers, paste(outDir, "/decr", decreasing, "markers.csv", sep=""), row.names = FALSE)
}

TOP_MARKER_NUM = 500

numCells <- getNumCells(PBMC4)
pvals <- pValueFromDEA(coexDF, numCells)

write_markers(outDir, final_clusters, pvals, TOP_MARKER_NUM, FALSE)
```

```{r}
sessionInfo()
```