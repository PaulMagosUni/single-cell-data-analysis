```{r}
library(dplyr)
library(Rtsne)
library(Seurat)
library(patchwork)
library(factoextra)
library(DropletUtils)
source("./libraries/utils.R")

DATASETS_FOLDER = './dataset/'
NAME = 'peripheal-blood'

inDataDir  = paste(DATASETS_FOLDER, NAME, sep='')
outDataDir = paste(DATASETS_FOLDER, NAME, '-filtered/', sep='')
dir.create(outDataDir, recursive = TRUE, showWarnings = FALSE)
```

```{r}
# Loading data
# Loading data
allData = Read10X(data.dir = inDataDir, strip.suffix = TRUE)

data = allData[[1]]

antibodyData = data.frame(allData[[2]])
# remove `_TotalSeqB` from column names
rownames(antibodyData) = gsub("_TotalSeqB", "", rownames(antibodyData))

```

```{r}
absr = CreateSeuratObject(counts = antibodyData, project = 'antibody', min.cells = 0, min.features = 0)
pbmc = CreateSeuratObject(counts = data, project = 'pbmc', min.cells = 3, min.features = 200)

absr[['controlIg']] = PercentageFeatureSet(absr, pattern = '^Ig')
pbmc[['percent.mt']] = PercentageFeatureSet(pbmc, pattern = "^MT-")


VlnPlot(absr, features = "controlIg", ncol = 1)
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

absr = subset(absr, subset = controlIg < 1.3)
pbmc = subset(pbmc, subset = nFeature_RNA > 0 & nFeature_RNA < 5000 & percent.mt < 10)

common_cells = intersect(colnames(absr), colnames(pbmc))

absr = subset(absr, cells = common_cells)
pbmc = subset(pbmc, cells = common_cells)
```

```{r}
library(scater)
library(scran)

# Extract counts for Antibody data and SC-RNA data
antibodyDataFiltered = t(data.frame(absr@assays[[1]]@counts))
genesData    = t(data.frame(pbmc@assays[[1]]@counts))

# Log normalize antibody data and process clusters
absce = as.SingleCellExperiment(absr)
ablnc = logNormCounts(absce)
clusters = scran::clusterCells(ablnc, assay.type = "logcounts")

# Show clusters in Genes data
gdsce = as.SingleCellExperiment(pbmc)
gdsce <- applySCE(gdsce, logNormCounts)
gdumap = runUMAP(gdsce)
colLabels(gdumap) <- factor(clusters)
plotUMAP(gdumap, colour_by="label", text_by="label", text_color="red")
```

```{r}
se.averaged = sumCountsAcrossCells(absce, clusters, exprs_values = "logcounts", average = TRUE)

library(pheatmap)
averaged = assay(se.averaged)
pheatmap(t(averaged - rowMeans(averaged)), breaks = seq(-3, 3, length.out = 101), kmeans_k = NA, cluster_cols = TRUE, cluster_rows = FALSE)
table(clusters)
```

```{r}
data_to_write = GetAssayData(object = pbmc, assay = "RNA", slot = "data")
write.csv(data_to_write, paste(outDataDir, "data.csv", sep=""))
Dir10X = paste(outDataDir, "10X", sep="")
if (!dir.exists(Dir10X)) {
  write10xCounts(Dir10X, data_to_write)
}

labels = data.frame("cell" = rownames(genesData), "cluster.ids" = clusters)
write.csv(labels, paste(outDataDir, "labels.csv", sep=""), row.names = FALSE)


uclust = sort(unique(clusters))
mapping = data.frame("go" = paste("Cluster-", uclust, sep=""), "id" = uclust)
write.csv(mapping, paste(outDataDir, "mapping.csv", sep=""), row.names = FALSE)
```