# COTAN analysis

```{r eval=TRUE, include=TRUE}
library(COTAN)
library(zeallot)
library(ggplot2)
library(factoextra)
library(qpdf)

source("./libraries/utils.R")
```

```{r}
outDir <- tempdir()
dataset_name = 'tabula-muris-heart'
dataset_path = './dataset/'

IN_DATA_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
IN_LABEL_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
```

```{r}
data <- Read10X(paste(IN_DATA_DIR, '10X', sep=''))
data = data#[1:100, 1:500]
```

```{r}
obj = COTAN(raw = data)
obj = initializeMetaDataset(obj,
                            GEO = "-",
                            sequencingMethod = "10x",
                            sampleCondition = dataset_name)

```

```{r}
ECDPlot(obj, yCut = 700)

```

```{r}
cellSizePlot(obj)
```

```{r}
# obj <- clean(obj, genesCutoff=0, cellsCutoff=0)
obj <- clean(obj)
# c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)
# pcaCellsPlot 
```

```{r}
# genesPlot
```

```{r}
# UDEPlot
```

```{r}
#  Threshold and MaxIteration ?
obj = estimateDispersionBisection(obj, cores = 10)

```

```{r}
outDir = paste('./COTAN/', dataset_name, sep="")
file_pos = paste(outDir, '/', dataset_name, '.cotan.RDS', sep = "")
```

```{r}
if (file.exists(file_pos)){
    obj <- readRDS(file.path(file_pos))
} else {
    # ActOnCells True ?
    obj <- calculateCoex(obj, actOnCells = TRUE)
    saveRDS(obj, file = file.path(file_pos))
}
```

## Clustering

It is possible to obtain a cell clusterization based on the concept of uniformity of expression of the genes across the cells. That is the cluster satisfies the null hypothesis of the `COTAN` model: the genes expression is not dependent on the cell in consideration.
```{r eval=FALSE, include=TRUE}
# TODO crash numero di dimensioni
# TODO ppure da l'errore:
# Error: 'VST.default' is not implemented yet
# Distance default o distance='euclidean' ?
if (file.exists(file.path(outDir, '/', "fineClusters.RDS"))){
    fineClusters <- readRDS(file.path(outDir, '/', "fineClusters.RDS"))
} else {
    print("Computing clusters")
    fineClusters <- cellsUniformClustering(obj, GDIThreshold = 1.4, cores = 6)
    saveRDS(fineClusters, file.path(outDir, '/', "fineClusters.RDS"))
}
```
```{r}
obj <- addClusterization(obj, clName = "FineClusters", clusters = fineClusters)
```

```{r eval=FALSE, include=TRUE}
c(coexDF, pValueDF) %<-% DEAOnClusters(obj, clusters = fineClusters)
obj <- addClusterizationCoex(obj, clName = "FineClusters",
                             coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
if (file.exists(file.path(outDir, '/', "mergedClusters.RDS")) ||
    file.exists(file.path(outDir, '/', "mergedCoex.RDS")) || 
    file.exists(file.path(outDir, '/', "mergedpValues.RDS"))){
        
    mergedClusters <- readRDS(file.path(outDir, '/', "mergedClusters.RDS"))
    coexDF <- readRDS(file.path(outDir, '/', "mergedCoex.RDS"))
    pValueDF <- readRDS(file.path(outDir, '/', "mergedpValues.RDS"))

} else {
    c(mergedClusters, coexDF, pValueDF) %<-%
      mergeUniformCellsClusters(obj, clusters=fineClusters, GDIThreshold = 2.1, cores = 8)
    saveRDS(mergedClusters, file.path(outDir, '/', "mergedClusters.RDS"))
    saveRDS(coexDF, file.path(outDir, '/', "mergedCoex.RDS"))
    saveRDS(pValueDF, file.path(outDir, '/', "mergedpValues.RDS"))
}
```
```{r}
obj <- addClusterization(obj, clName = "MergedClusters",
                         clusters = mergedClusters, coexDF = coexDF)
```

```{r}
# mergedUMAPPlot <- UMAPPlot(coexDF, elements = layersGenes,
                        #    title = "Fine Cluster UMAP Plot")
# mergedUMAPPlot <- UMAPPlot(coexDF)
# plot(mergedUMAPPlot)
```