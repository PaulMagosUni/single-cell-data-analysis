# COTAN analysis

```{r eval=TRUE, include=TRUE}
library(COTAN)
library(zeallot)
library(ggplot2)
library(factoextra)
library(qpdf)

source("./libraries/utils.R")
```

```{r}
outDir <- tempdir()
dataset_name = 'zheng-4'
dataset_path = './dataset/'

IN_DATA_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
IN_LABEL_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
```

```{r}
# SSAMPLING = 0.2

data <- Read10X(paste(IN_DATA_DIR, '10X', sep=''))
# Retain only SSAMPLING of columns in data
# set.seed(123)
# data = data[, sample(ncol(data), floor(ncol(data) * SSAMPLING))]
```

```{r}
obj = COTAN(raw = data)
obj = initializeMetaDataset(obj,
                            GEO = "-",
                            sequencingMethod = "10x",
                            sampleCondition = dataset_name)

```

```{r}
# ECDPlot(obj, yCut = 700)

```

```{r}
# cellSizePlot(obj)
```

```{r}
obj <- clean(obj, genesCutoff=0, cellsCutoff=0)
# c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)
# pcaCellsPlot 
```

```{r}
# genesPlot
```

```{r}
# UDEPlot
```

```{r}
#  Threshold and MaxIteration ?
obj = estimateDispersionBisection(obj, cores = 7)

```

```{r}
outDir = paste('./COTAN/', dataset_name, sep="")
dir.create(outDir, recursive = TRUE, showWarnings = FALSE)
file_pos = paste(outDir, '/', dataset_name, '.cotan.RDS', sep = "")
```

```{r}
if (file.exists(file_pos)){
    obj <- readRDS(file.path(file_pos))
} else {
    # ActOnCells True ?
    obj <- calculateCoex(obj, actOnCells = TRUE)
    saveRDS(obj, file = file.path(file_pos))
}
```

## Clustering

It is possible to obtain a cell clusterization based on the concept of uniformity of expression of the genes across the cells. That is the cluster satisfies the null hypothesis of the `COTAN` model: the genes expression is not dependent on the cell in consideration.

```{r eval=FALSE, include=TRUE}
# TODO crash numero di dimensioni
# TODO ppure da l'errore:
# Error: 'VST.default' is not implemented yet
# Distance default o distance='euclidean' ?
if (file.exists(file.path(outDir, '/', "fineClusters.RDS"))){
    fineClusters <- readRDS(file.path(outDir, '/', "fineClusters.RDS"))
} else {
    print("Computing clusters")
    fineClusters <- cellsUniformClustering(obj, GDIThreshold = 1.25, cores = 6,
                                  saveObj = TRUE, outDir = outDir)
    saveRDS(fineClusters, file.path(outDir, '/', "fineClusters.RDS"))
}
```


```{r}
obj <- addClusterization(obj, clName = "FineClusters", clusters = fineClusters)
```

```{r eval=FALSE, include=TRUE}
c(coexDF, pValueDF) %<-% DEAOnClusters(obj, clusters = fineClusters)
obj <- addClusterizationCoex(obj, clName = "FineClusters",
                             coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
if (file.exists(file.path(outDir, '/', "mergedClusters.RDS")) ||
    file.exists(file.path(outDir, '/', "mergedCoex.RDS")) || 
    file.exists(file.path(outDir, '/', "mergedpValues.RDS"))){
        
    mergedClusters <- readRDS(file.path(outDir, '/', "mergedClusters.RDS"))
    coexDF <- readRDS(file.path(outDir, '/', "mergedCoex.RDS"))
    pValueDF <- readRDS(file.path(outDir, '/', "mergedpValues.RDS"))

} else {
    c(mergedClusters, coexDF, pValueDF) %<-%
      mergeUniformCellsClusters(obj, clusters=fineClusters, GDIThreshold = 1.2, cores = 8)
    saveRDS(mergedClusters, file.path(outDir, '/', "mergedClusters.RDS"))
    saveRDS(coexDF, file.path(outDir, '/', "mergedCoex.RDS"))
    saveRDS(pValueDF, file.path(outDir, '/', "mergedpValues.RDS"))
}
obj <- addClusterization(obj, clName = "MergedClusters",
                         clusters = mergedClusters, coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
# TODO assegnare correttamente
cluster = as.data.frame(mergedClusters)
colnames(cluster)[colnames(cluster) == deparse(substitute(mergedClusters))] <- "cluster"
cluster$cluster = as.numeric(cluster$cluster)
cluster$cell = rownames(cluster)
rownames(cluster) = c(1:nrow(cluster))
```

```{r eval=FALSE, include=TRUE}
OUT_RES_DIR = paste('./results/', dataset_name, '/COTAN', sep="")
if (!dir.exists(OUT_RES_DIR)){
    dir.create(OUT_RES_DIR)
}

write_clustering(OUT_RES_DIR, cluster, "cell", "cluster")

# TODO formattare il dataframe di pValueDF

write_markers(OUT_RES_DIR, pbmc.markers, "gene", "cluster", "avg_log2FC", TRUE, TOP_MARKER_NUM)
```
```{r eval=FALSE, include=TRUE}
# mergedUMAPPlot <- UMAPPlot(coexDF, elements = layersGenes,
                        #    title = "Fine Cluster UMAP Plot")
# mergedUMAPPlot <- UMAPPlot(coexDF)
# plot(mergedUMAPPlot)
```