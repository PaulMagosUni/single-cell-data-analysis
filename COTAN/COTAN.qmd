# COTAN analysis

```{r eval=TRUE, include=TRUE}
library(COTAN)
library(zeallot)
library(ggplot2)
library(factoextra)
library(qpdf)

source("./utils.R")
```

```{r}
outDir <- tempdir()
dataset_name = 'tabula-muris-marrow_P7_3-filtered'
file_name = 'marrow'

IN_DATA_DIR = "./dataset/tabula-muris-marrow_P7_3-filtered/"
IN_LABEL_DIR = "./dataset/tabula-muris-marrow_P7_3-filtered/"
CHANNEL = "10X_P7_4"
```

```{f{r}
data <- Read10X(paste(IN_DATA_DIR, '10X', sep=''))
```

```{r}
obj = COTAN(raw = data)
obj = initializeMetaDataset(obj,
                            GEO = "-",
                            sequencingMethod = "10x",
                            sampleCondition = file_name)

```

```{r}
ECDPlot(obj, yCut = 700)

```

```{r}
cellSizePlot(obj)
```

```{r}
# Perchè con soglia 0 continua a droppare ?
obj <- clean(obj, genesCutoff=0, cellsCutoff=0)
c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)
pcaCellsPlot 
```

```{r}
genesPlot
```

```{r}
UDEPlot
```

```{r}
#  Threshold and MaxIteration ?
obj = estimateDispersionBisection(obj, cores = 10)

```

```{r}
file_pos = paste('./COTAN/', dataset_name, '/', file_name, '.cotan.RDS', sep = "")
```

```{r}
if (file.exists(file_pos)){
    obj <- readRDS(file.path(file_pos))
} else {
    # ActOnCells True ?
    obj <- calculateCoex(obj, actOnCells = TRUE)
    saveRDS(obj, file = file.path(file_pos))
}
```

## Clustering

It is possible to obtain a cell clusterization based on the concept of uniformity of expression of the genes across the cells. That is the cluster satisfies the null hypothesis of the `COTAN` model: the genes expression is not dependent on the cell in consideration.

```{r}
outDir = paste('./COTAN/', dataset_name, sep="")
```

```{r eval=FALSE, include=TRUE}
# Nel calcolo la funzione dice : "Genes/cells selection done: dropped [2697] genes and [0] cells"
# Perchè?
# Distance default o distance='euclidean' ?
fineClusters <- cellsUniformClustering(obj, GDIThreshold = 1.4, cores = 10,
                                       saveObj = TRUE, outDir = outDir)
```

```{r}
obj <- addClusterization(obj, clName = "FineClusters", clusters = fineClusters)
```

```{r eval=FALSE, include=TRUE}
c(coexDF, pValueDF) %<-% DEAOnClusters(obj, clusters = fineClusters)
obj <- addClusterizationCoex(obj, clName = "FineClusters",
                             coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
c(mergedClusters, coexDF, pValueDF) %<-%
  mergeUniformCellsClusters(obj, GDIThreshold = 1.4, cores = 10,
                            saveObj = TRUE, outDir = outDir)
obj <- addClusterization(obj, clName = "MergedClusters",
                         clusters = mergedClusters, coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
mergedUMAPPlot <- UMAPPlot(coexDF, elements = layersGenes,
                           title = "Fine Cluster UMAP Plot")
plot(mergedUMAPPlot)
```